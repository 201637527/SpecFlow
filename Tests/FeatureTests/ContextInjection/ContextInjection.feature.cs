//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.21006.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FeatureTests.ContextInjection
{
    using TechTalk.SpecFlow;
    
    
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Injecting context into step specifications")]
    public partial class InjectingContextIntoStepSpecificationsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en"), "Injecting context into step specifications", "As a developer\r\nI would like to have the system automatically inject an instance " +
                    "of any class as defined in the constructor of a step file\r\nSo that I don\'t have " +
                    "to rely on the global shared state and can define the contexts required for each" +
                    " scenario.", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feature with no context")]
        public virtual void FeatureWithNoContext()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feature with no context", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("a feature which requires no context");
            testRunner.Then("everything is dandy");
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feature with a single context")]
        public virtual void FeatureWithASingleContext()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feature with a single context", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("a feature which requires a single context");
            testRunner.Then("the context is set");
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feature with multiple contexts")]
        public virtual void FeatureWithMultipleContexts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feature with multiple contexts", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("a feature which requires multiple contexts");
            testRunner.Then("the contexts are set");
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feature with recursive contexts")]
        public virtual void FeatureWithRecursiveContexts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feature with recursive contexts", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("a feature which requires a recursive context");
            testRunner.Then("the context is set");
            testRunner.And("its sub-context is set");
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feature with a dependent context")]
        public virtual void FeatureWithADependentContext()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feature with a dependent context", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("a feature which requires a single context");
            testRunner.Then("the context is set");
            testRunner.And("the context was created by the feature with a single context scenario");
            testRunner.CollectScenarioErrors();
        }
    }
}
