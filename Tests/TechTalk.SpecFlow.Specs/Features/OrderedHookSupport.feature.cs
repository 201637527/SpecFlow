// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.7.1.0
//      SpecFlow Generator Version:1.7.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace TechTalk.SpecFlow.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.7.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Execute hooks in specified order")]
    public partial class ExecuteHooksInSpecifiedOrderFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "OrderedHookSupport.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Execute hooks in specified order", "As a developer\r\nI would like to be able to control the order of execution of hook" +
                    "s of the same type\r\nSo that I can set up and teardown my scenario accordingly", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void ShouldExecuteBeforeSpecFlowEventsInTheCorrectOrderIeLowestNumbersFirst(string eventType, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should execute \'Before*\' SpecFlow events in the correct order, ie lowest numbers " +
                    "first", exampleTags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 7
 testRunner.Given("a scenario \'Simple Scenario\' as", "When I do something", ((TechTalk.SpecFlow.Table)(null)));
#line 11
 testRunner.And(string.Format("a hook \'FirstHook\' for \'{0}\' with priority \'1000\'", eventType));
#line 12
 testRunner.And(string.Format("a hook \'ThirdHook\' for \'{0}\' with priority \'3000\'", eventType));
#line 13
 testRunner.And(string.Format("a hook \'SecondHook\' for \'{0}\' with priority \'2000\'", eventType));
#line 14
 testRunner.And(string.Format("a hook \'DefaultHook\' for \'{0}\'", eventType));
#line 15
 testRunner.And(string.Format("a hook \'FifthHook\' for \'{0}\' with priority \'10001\'", eventType));
#line 16
 testRunner.And("all steps are bound and pass");
#line 17
 testRunner.When("I execute the tests");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "event"});
            table1.AddRow(new string[] {
                        "FirstHook"});
            table1.AddRow(new string[] {
                        "SecondHook"});
            table1.AddRow(new string[] {
                        "ThirdHook"});
            table1.AddRow(new string[] {
                        "DefaultHook"});
            table1.AddRow(new string[] {
                        "FifthHook"});
#line 18
 testRunner.Then("the hooks are executed in the order", ((string)(null)), table1);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute \'Before*\' SpecFlow events in the correct order, ie lowest numbers " +
            "first")]
        public virtual void ShouldExecuteBeforeSpecFlowEventsInTheCorrectOrderIeLowestNumbersFirst_Before()
        {
            this.ShouldExecuteBeforeSpecFlowEventsInTheCorrectOrderIeLowestNumbersFirst("Before", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute \'Before*\' SpecFlow events in the correct order, ie lowest numbers " +
            "first")]
        public virtual void ShouldExecuteBeforeSpecFlowEventsInTheCorrectOrderIeLowestNumbersFirst_BeforeScenario()
        {
            this.ShouldExecuteBeforeSpecFlowEventsInTheCorrectOrderIeLowestNumbersFirst("BeforeScenario", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute \'Before*\' SpecFlow events in the correct order, ie lowest numbers " +
            "first")]
        public virtual void ShouldExecuteBeforeSpecFlowEventsInTheCorrectOrderIeLowestNumbersFirst_BeforeTestRun()
        {
            this.ShouldExecuteBeforeSpecFlowEventsInTheCorrectOrderIeLowestNumbersFirst("BeforeTestRun", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute \'Before*\' SpecFlow events in the correct order, ie lowest numbers " +
            "first")]
        public virtual void ShouldExecuteBeforeSpecFlowEventsInTheCorrectOrderIeLowestNumbersFirst_BeforeFeature()
        {
            this.ShouldExecuteBeforeSpecFlowEventsInTheCorrectOrderIeLowestNumbersFirst("BeforeFeature", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute \'Before*\' SpecFlow events in the correct order, ie lowest numbers " +
            "first")]
        public virtual void ShouldExecuteBeforeSpecFlowEventsInTheCorrectOrderIeLowestNumbersFirst_BeforeScenarioBlock()
        {
            this.ShouldExecuteBeforeSpecFlowEventsInTheCorrectOrderIeLowestNumbersFirst("BeforeScenarioBlock", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute \'Before*\' SpecFlow events in the correct order, ie lowest numbers " +
            "first")]
        public virtual void ShouldExecuteBeforeSpecFlowEventsInTheCorrectOrderIeLowestNumbersFirst_BeforeStep()
        {
            this.ShouldExecuteBeforeSpecFlowEventsInTheCorrectOrderIeLowestNumbersFirst("BeforeStep", ((string[])(null)));
        }
        
        public virtual void ShouldExecuteAfterSpecFlowEventsInTheCorrectOrderIeHighestNumbersFirst(string eventType, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should execute \'After*\' SpecFlow events in the correct order, ie highest numbers " +
                    "first", exampleTags);
#line 35
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 36
 testRunner.Given("a scenario \'Simple Scenario\' as", "When I do something", ((TechTalk.SpecFlow.Table)(null)));
#line 40
 testRunner.And(string.Format("a hook \'FirstHook\' for \'{0}\' with priority \'1000\'", eventType));
#line 41
 testRunner.And(string.Format("a hook \'ThirdHook\' for \'{0}\' with priority \'3000\'", eventType));
#line 42
 testRunner.And(string.Format("a hook \'SecondHook\' for \'{0}\' with priority \'2000\'", eventType));
#line 43
 testRunner.And(string.Format("a hook \'DefaultHook\' for \'{0}\'", eventType));
#line 44
 testRunner.And(string.Format("a hook \'FifthHook\' for \'{0}\' with priority \'10001\'", eventType));
#line 45
 testRunner.And("all steps are bound and pass");
#line 46
 testRunner.When("I execute the tests");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "event"});
            table2.AddRow(new string[] {
                        "FifthHook"});
            table2.AddRow(new string[] {
                        "DefaultHook"});
            table2.AddRow(new string[] {
                        "ThirdHook"});
            table2.AddRow(new string[] {
                        "SecondHook"});
            table2.AddRow(new string[] {
                        "FirstHook"});
#line 47
 testRunner.Then("the hooks are executed in the order", ((string)(null)), table2);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute \'After*\' SpecFlow events in the correct order, ie highest numbers " +
            "first")]
        public virtual void ShouldExecuteAfterSpecFlowEventsInTheCorrectOrderIeHighestNumbersFirst_After()
        {
            this.ShouldExecuteAfterSpecFlowEventsInTheCorrectOrderIeHighestNumbersFirst("After", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute \'After*\' SpecFlow events in the correct order, ie highest numbers " +
            "first")]
        public virtual void ShouldExecuteAfterSpecFlowEventsInTheCorrectOrderIeHighestNumbersFirst_AfterScenario()
        {
            this.ShouldExecuteAfterSpecFlowEventsInTheCorrectOrderIeHighestNumbersFirst("AfterScenario", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute \'After*\' SpecFlow events in the correct order, ie highest numbers " +
            "first")]
        public virtual void ShouldExecuteAfterSpecFlowEventsInTheCorrectOrderIeHighestNumbersFirst_AfterFeature()
        {
            this.ShouldExecuteAfterSpecFlowEventsInTheCorrectOrderIeHighestNumbersFirst("AfterFeature", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute \'After*\' SpecFlow events in the correct order, ie highest numbers " +
            "first")]
        public virtual void ShouldExecuteAfterSpecFlowEventsInTheCorrectOrderIeHighestNumbersFirst_AfterScenarioBlock()
        {
            this.ShouldExecuteAfterSpecFlowEventsInTheCorrectOrderIeHighestNumbersFirst("AfterScenarioBlock", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute \'After*\' SpecFlow events in the correct order, ie highest numbers " +
            "first")]
        public virtual void ShouldExecuteAfterSpecFlowEventsInTheCorrectOrderIeHighestNumbersFirst_AfterStep()
        {
            this.ShouldExecuteAfterSpecFlowEventsInTheCorrectOrderIeHighestNumbersFirst("AfterStep", ((string[])(null)));
        }
    }
}
#endregion
