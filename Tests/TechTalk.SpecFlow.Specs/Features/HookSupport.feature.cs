// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.7.1.0
//      SpecFlow Generator Version:1.7.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace TechTalk.SpecFlow.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.7.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Execute hooks")]
    public partial class ExecuteHooksFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "HookSupport.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Execute hooks", "As a developer\r\nI would like to be able to hook into pre and post conditions in S" +
                    "pecFlow\r\nSo that I can set up and teardown my scenario accordingly", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute SpecFlow events")]
        [NUnit.Framework.TestCaseAttribute("BeforeScenario", new string[0])]
        [NUnit.Framework.TestCaseAttribute("AfterScenario", new string[0])]
        [NUnit.Framework.TestCaseAttribute("BeforeFeature", new string[0])]
        [NUnit.Framework.TestCaseAttribute("AfterFeature", new string[0])]
        [NUnit.Framework.TestCaseAttribute("BeforeStep", new string[0])]
        [NUnit.Framework.TestCaseAttribute("AfterStep", new string[0])]
        [NUnit.Framework.TestCaseAttribute("BeforeScenarioBlock", new string[0])]
        [NUnit.Framework.TestCaseAttribute("AfterScenarioBlock", new string[0])]
        [NUnit.Framework.TestCaseAttribute("BeforeTestRun", new string[0])]
        public virtual void ShouldExecuteSpecFlowEvents(string @event, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should execute SpecFlow events", exampleTags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 7
 testRunner.Given("a scenario \'Simple Scenario\' as", "When I do something", ((TechTalk.SpecFlow.Table)(null)));
#line 11
 testRunner.And(string.Format("a hook \'HookFor{0}\' for \'{0}\'", @event));
#line 12
 testRunner.And("all steps are bound and pass");
#line 13
 testRunner.When("I execute the tests");
#line 14
 testRunner.Then(string.Format("the hook \'HookFor{0}\' is executed once", @event));
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#endregion
