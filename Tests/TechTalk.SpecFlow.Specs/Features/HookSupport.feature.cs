// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TechTalk.SpecFlow.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Execute hooks")]
    public partial class ExecuteHooksFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "HookSupport.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Execute hooks", "\tAs a developer\r\n\tI would like to be able to hook into pre and post conditions in" +
                    " SpecFlow\r\n\tSo that I can set up and teardown my scenario accordingly", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void ShouldExecuteSpecFlowEvents(string @event, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should execute SpecFlow events", exampleTags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 7
 testRunner.Given("a scenario \'Simple Scenario\' as", "When I do something", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 11
 testRunner.And(string.Format("a hook \'HookFor{0}\' for \'{0}\'", @event), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.And("all steps are bound and pass", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
 testRunner.Then(string.Format("the hook \'HookFor{0}\' is executed once", @event), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute SpecFlow events: BeforeScenario")]
        public virtual void ShouldExecuteSpecFlowEvents_BeforeScenario()
        {
            this.ShouldExecuteSpecFlowEvents("BeforeScenario", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute SpecFlow events: AfterScenario")]
        public virtual void ShouldExecuteSpecFlowEvents_AfterScenario()
        {
            this.ShouldExecuteSpecFlowEvents("AfterScenario", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute SpecFlow events: BeforeFeature")]
        public virtual void ShouldExecuteSpecFlowEvents_BeforeFeature()
        {
            this.ShouldExecuteSpecFlowEvents("BeforeFeature", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute SpecFlow events: AfterFeature")]
        public virtual void ShouldExecuteSpecFlowEvents_AfterFeature()
        {
            this.ShouldExecuteSpecFlowEvents("AfterFeature", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute SpecFlow events: BeforeStep")]
        public virtual void ShouldExecuteSpecFlowEvents_BeforeStep()
        {
            this.ShouldExecuteSpecFlowEvents("BeforeStep", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute SpecFlow events: AfterStep")]
        public virtual void ShouldExecuteSpecFlowEvents_AfterStep()
        {
            this.ShouldExecuteSpecFlowEvents("AfterStep", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute SpecFlow events: BeforeScenarioBlock")]
        public virtual void ShouldExecuteSpecFlowEvents_BeforeScenarioBlock()
        {
            this.ShouldExecuteSpecFlowEvents("BeforeScenarioBlock", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute SpecFlow events: AfterScenarioBlock")]
        public virtual void ShouldExecuteSpecFlowEvents_AfterScenarioBlock()
        {
            this.ShouldExecuteSpecFlowEvents("AfterScenarioBlock", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute SpecFlow events: BeforeTestRun")]
        public virtual void ShouldExecuteSpecFlowEvents_BeforeTestRun()
        {
            this.ShouldExecuteSpecFlowEvents("BeforeTestRun", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute SpecFlow events: AfterTestRun")]
        public virtual void ShouldExecuteSpecFlowEvents_AfterTestRun()
        {
            this.ShouldExecuteSpecFlowEvents("AfterTestRun", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute SpecFlow events: Before")]
        public virtual void ShouldExecuteSpecFlowEvents_CucumberCompatibility_Before()
        {
            this.ShouldExecuteSpecFlowEvents("Before", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute SpecFlow events: After")]
        public virtual void ShouldExecuteSpecFlowEvents_CucumberCompatibility_After()
        {
            this.ShouldExecuteSpecFlowEvents("After", ((string[])(null)));
#line hidden
        }
        
        public virtual void ShouldExecuteTheHooksAccordingToTheirSemantics(string @event, string count, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should execute the hooks according to their semantics", exampleTags);
#line 34
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 35
 testRunner.Given("there is a feature file in the project as", @"Feature: Feature 1

Scenario: Scenario 1
Given there is something
Given there is something
When I do something
When I do something
Then something should happen
Then something should happen

Scenario: Scenario 2
Given there is something
Given there is something
When I do something
When I do something
Then something should happen
Then something should happen", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 55
 testRunner.Given("there is a feature file in the project as", "Feature: Feature 2\r\n\r\nScenario: Scenario 3\r\nGiven there is something\r\nGiven there" +
                    " is something\r\nWhen I do something\r\nWhen I do something\r\nThen something should h" +
                    "appen\r\nThen something should happen", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 67
 testRunner.And(string.Format("a hook \'HookFor{0}\' for \'{0}\'", @event), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
 testRunner.And("all steps are bound and pass", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
 testRunner.Then(string.Format("the hook \'HookFor{0}\' is executed {1} times", @event, count), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute the hooks according to their semantics: BeforeStep")]
        public virtual void ShouldExecuteTheHooksAccordingToTheirSemantics_BeforeStep()
        {
            this.ShouldExecuteTheHooksAccordingToTheirSemantics("BeforeStep", "18", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute the hooks according to their semantics: AfterStep")]
        public virtual void ShouldExecuteTheHooksAccordingToTheirSemantics_AfterStep()
        {
            this.ShouldExecuteTheHooksAccordingToTheirSemantics("AfterStep", "18", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute the hooks according to their semantics: BeforeScenarioBlock")]
        public virtual void ShouldExecuteTheHooksAccordingToTheirSemantics_BeforeScenarioBlock()
        {
            this.ShouldExecuteTheHooksAccordingToTheirSemantics("BeforeScenarioBlock", "9", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute the hooks according to their semantics: AfterScenarioBlock")]
        public virtual void ShouldExecuteTheHooksAccordingToTheirSemantics_AfterScenarioBlock()
        {
            this.ShouldExecuteTheHooksAccordingToTheirSemantics("AfterScenarioBlock", "9", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute the hooks according to their semantics: BeforeScenario")]
        public virtual void ShouldExecuteTheHooksAccordingToTheirSemantics_BeforeScenario()
        {
            this.ShouldExecuteTheHooksAccordingToTheirSemantics("BeforeScenario", "3", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute the hooks according to their semantics: AfterScenario")]
        public virtual void ShouldExecuteTheHooksAccordingToTheirSemantics_AfterScenario()
        {
            this.ShouldExecuteTheHooksAccordingToTheirSemantics("AfterScenario", "3", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute the hooks according to their semantics: BeforeFeature")]
        public virtual void ShouldExecuteTheHooksAccordingToTheirSemantics_BeforeFeature()
        {
            this.ShouldExecuteTheHooksAccordingToTheirSemantics("BeforeFeature", "2", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute the hooks according to their semantics: AfterFeature")]
        public virtual void ShouldExecuteTheHooksAccordingToTheirSemantics_AfterFeature()
        {
            this.ShouldExecuteTheHooksAccordingToTheirSemantics("AfterFeature", "2", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute the hooks according to their semantics: BeforeTestRun")]
        public virtual void ShouldExecuteTheHooksAccordingToTheirSemantics_BeforeTestRun()
        {
            this.ShouldExecuteTheHooksAccordingToTheirSemantics("BeforeTestRun", "1", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute the hooks according to their semantics: Before")]
        public virtual void ShouldExecuteTheHooksAccordingToTheirSemantics_CucumberCompatibility_Before()
        {
            this.ShouldExecuteTheHooksAccordingToTheirSemantics("Before", "3", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should execute the hooks according to their semantics: After")]
        public virtual void ShouldExecuteTheHooksAccordingToTheirSemantics_CucumberCompatibility_After()
        {
            this.ShouldExecuteTheHooksAccordingToTheirSemantics("After", "3", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
