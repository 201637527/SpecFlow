// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.7.1.0
//      SpecFlow Generator Version:1.7.0.0
//      Runtime Version:4.0.30319.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace TechTalk.SpecFlow.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.7.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Injecting context into step specifications")]
    public partial class InjectingContextIntoStepSpecificationsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ContextInjection.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Injecting context into step specifications", "As a developer\nI would like to have the system automatically inject an instance o" +
                    "f any class as defined in the constructor of a step file\nSo that I don\'t have to" +
                    " rely on the global shared state and can define the contexts required for each s" +
                    "cenario.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
#line 7
 testRunner.Given("the following binding class", @"public class SingleContext
{
public static int InstanceCount = 0;
public string ScenarioTitle;

public SingleContext()
{
ScenarioTitle = ScenarioContext.Current.ScenarioInfo.Title;
InstanceCount++;
}
}
public class OtherSingleContext
{
}
public class NestedContext
{
public readonly SingleContext SingleContext;

public NestedContext(SingleContext singleContext)
{
if (singleContext == null) throw new ArgumentNullException(""singleContext"");
this.SingleContext = singleContext;
}
}
public class DisposableContext : IDisposable
{
public static bool WasDisposed = false;

public void Dispose()
{
WasDisposed = true;
}
}", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 43
 testRunner.And("the following step definition", @"[Then(@""the instance count of SingleContext should be (\d+)"")]
public void ThenTheInstanceCountShouldBe(int expectedCount)
{
if (SingleContext.InstanceCount != expectedCount) throw new Exception(""Instance count should be "" + expectedCount + "" but was "" + SingleContext.InstanceCount);
}", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Binding class can depend on a single context")]
        public virtual void BindingClassCanDependOnASingleContext()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Binding class can depend on a single context", ((string[])(null)));
#line 52
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 53
 testRunner.Given("the following binding class", @"[Binding]
public class StepsWithSingleContext
{
private readonly SingleContext singleContext;

public StepsWithSingleContext(SingleContext singleContext)
{
if (singleContext == null) throw new ArgumentNullException(""singleContext"");
this.singleContext = singleContext;
}

[When(@""I do something"")]
public void WhenIDoSomething()
{
}
}", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 72
 testRunner.And("a scenario \'Simple Scenario\' as", "When I do something\nThen the instance count of SingleContext should be 1", ((TechTalk.SpecFlow.Table)(null)));
#line 77
 testRunner.When("I execute the tests");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Succeeded"});
            table1.AddRow(new string[] {
                        "1"});
#line 78
 testRunner.Then("the execution summary should contain", ((string)(null)), table1);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Binding class can depend on multiple contexts")]
        public virtual void BindingClassCanDependOnMultipleContexts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Binding class can depend on multiple contexts", ((string[])(null)));
#line 82
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 83
 testRunner.Given("the following binding class", @"[Binding]
public class StepsWithMultipleContexts
{
public StepsWithMultipleContexts(SingleContext singleContext, OtherSingleContext otherContext)
{
if (singleContext == null) throw new ArgumentNullException(""singleContext"");
if (otherContext == null) throw new ArgumentNullException(""otherContext"");
}

[When(@""I do something"")]
public void WhenIDoSomething()
{
}
}", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 100
 testRunner.And("a scenario \'Simple Scenario\' as", "When I do something\nThen the instance count of SingleContext should be 1", ((TechTalk.SpecFlow.Table)(null)));
#line 105
 testRunner.When("I execute the tests");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Succeeded"});
            table2.AddRow(new string[] {
                        "1"});
#line 106
 testRunner.Then("the execution summary should contain", ((string)(null)), table2);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Context classes can depend on other context classes recursively")]
        public virtual void ContextClassesCanDependOnOtherContextClassesRecursively()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Context classes can depend on other context classes recursively", ((string[])(null)));
#line 110
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 111
 testRunner.Given("the following binding class", @"[Binding]
public class StepsWithNestedContext
{
public StepsWithNestedContext(NestedContext nestedContext, SingleContext singleContext)
{
if (nestedContext == null) throw new ArgumentNullException(""nestedContext"");
if (singleContext == null) throw new ArgumentNullException(""singleContext"");
}

[When(@""I do something"")]
public void WhenIDoSomething()
{
}
}", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 128
 testRunner.And("a scenario \'Simple Scenario\' as", "When I do something\nThen the instance count of SingleContext should be 1", ((TechTalk.SpecFlow.Table)(null)));
#line 133
 testRunner.When("I execute the tests");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Succeeded"});
            table3.AddRow(new string[] {
                        "1"});
#line 134
 testRunner.Then("the execution summary should contain", ((string)(null)), table3);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Context classes are shared across binding classes")]
        public virtual void ContextClassesAreSharedAcrossBindingClasses()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Context classes are shared across binding classes", ((string[])(null)));
#line 138
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 139
 testRunner.Given("the following binding class", "[Binding]\npublic class StepsWithSingleContext\n{\npublic StepsWithSingleContext(Sin" +
                    "gleContext singleContext)\n{\nif (singleContext == null) throw new ArgumentNullExc" +
                    "eption(\"singleContext\");\n}\n\n[When(@\"I do something\")]\npublic void WhenIDoSomethi" +
                    "ng()\n{\n}\n}", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 155
 testRunner.Given("the following binding class", @"[Binding]
public class OtherStepsWithSingleContext
{
public OtherStepsWithSingleContext(SingleContext singleContext)
{
if (singleContext == null) throw new ArgumentNullException(""singleContext"");
}

[When(@""I do something else"")]
public void WhenIDoSomethingElse()
{
}
}", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 171
 testRunner.And("a scenario \'Simple Scenario\' as", "When I do something\nAnd I do something else\nThen the instance count of SingleCont" +
                    "ext should be 1", ((TechTalk.SpecFlow.Table)(null)));
#line 177
 testRunner.When("I execute the tests");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Succeeded"});
            table4.AddRow(new string[] {
                        "1"});
#line 178
 testRunner.Then("the execution summary should contain", ((string)(null)), table4);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Context classes are recreated for every scenario")]
        public virtual void ContextClassesAreRecreatedForEveryScenario()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Context classes are recreated for every scenario", ((string[])(null)));
#line 182
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 183
 testRunner.Given("the following binding class", @"[Binding]
public class StepsWithSingleContext
{
private SingleContext singleContext;

public StepsWithSingleContext(SingleContext singleContext)
{
if (singleContext == null) throw new ArgumentNullException(""singleContext"");
this.singleContext = singleContext;
}

[When(@""I do something"")]
public void WhenIDoSomething()
{
}


[Then(@""the SingleContext instance was created in scenario '(.+)'"")]
public void ThenTheInstanceCountShouldBe(string title)
{
if (singleContext.ScenarioTitle != title) throw new Exception(""Instance count should be created in "" + title + "" but was "" + singleContext.ScenarioTitle);
}
}", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 209
 testRunner.And("a scenario \'Simple Scenario\' as", "When I do something\nThen the SingleContext instance was created in scenario \'Simp" +
                    "le Scenario\'", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 214
 testRunner.And("a scenario \'Other Scenario\' as", "When I do something\nThen the SingleContext instance was created in scenario \'Othe" +
                    "r Scenario\'", ((TechTalk.SpecFlow.Table)(null)));
#line 219
 testRunner.When("I execute the tests");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Succeeded"});
            table5.AddRow(new string[] {
                        "2"});
#line 220
 testRunner.Then("the execution summary should contain", ((string)(null)), table5);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Disposable dependencies should be disposed after scenario execution")]
        public virtual void DisposableDependenciesShouldBeDisposedAfterScenarioExecution()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Disposable dependencies should be disposed after scenario execution", ((string[])(null)));
#line 224
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 225
 testRunner.Given("the following binding class", @"[Binding]
public class StepsWithSingleContext
{
public StepsWithSingleContext(DisposableContext context)
{
}

[When(@""I do something"")]
public void WhenIDoSomething()
{
if (DisposableContext.WasDisposed) throw new Exception(""context was disposed"");
}

[AfterFeature]
static public void AfterFeature()
{
}
}", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 246
 testRunner.And("a scenario \'Simple Scenario\' as", "When I do something", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 250
 testRunner.And("a scenario \'Second Scenario\' as", "When I do something", ((TechTalk.SpecFlow.Table)(null)));
#line 254
 testRunner.When("I execute the tests");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Succeeded",
                        "Failed"});
            table6.AddRow(new string[] {
                        "1",
                        "1"});
#line 255
 testRunner.Then("the execution summary should contain", ((string)(null)), table6);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should be able to inject ScenarioContext")]
        public virtual void ShouldBeAbleToInjectScenarioContext()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should be able to inject ScenarioContext", ((string[])(null)));
#line 259
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 260
 testRunner.Given("the following binding class", @"[Binding]
public class StepsWithScenarioContext
{
public StepsWithScenarioContext(ScenarioContext scenarioContext)
{
if (scenarioContext == null) throw new ArgumentNullException(""scenarioContext"");
}

[When(@""I do something"")]
public void WhenIDoSomething()
{
}
}", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 276
 testRunner.And("a scenario \'Simple Scenario\' as", "When I do something         ", ((TechTalk.SpecFlow.Table)(null)));
#line 280
 testRunner.When("I execute the tests");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Succeeded"});
            table7.AddRow(new string[] {
                        "1"});
#line 281
 testRunner.Then("the execution summary should contain", ((string)(null)), table7);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The same ScenarioContext should be inject in the same scenario")]
        public virtual void TheSameScenarioContextShouldBeInjectInTheSameScenario()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The same ScenarioContext should be inject in the same scenario", ((string[])(null)));
#line 285
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 286
 testRunner.Given("the following binding class", @"[Binding]
public class StepsWithScenarioContext
{
private readonly ScenarioContext scenarioContext;

public StepsWithScenarioContext(ScenarioContext scenarioContext)
{
if (scenarioContext == null) throw new ArgumentNullException(""scenarioContext"");
this.scenarioContext = scenarioContext;
}

[Given(@""I put something into the context"")]
public void GivenIPutSomethingIntoTheContext()
{
scenarioContext.Set(""test-value"", ""test-key"");
}
}", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 306
 testRunner.Given("the following binding class", @"[Binding]
public class AnotherStepsWithScenarioContext
{
private readonly ScenarioContext scenarioContext;

public AnotherStepsWithScenarioContext(ScenarioContext scenarioContext)
{
if (scenarioContext == null) throw new ArgumentNullException(""scenarioContext"");
this.scenarioContext = scenarioContext;
}

[Then(@""something should be found in the context"")]
public void ThenSomethingShouldBeFoundInTheContext()
{
var testValue = scenarioContext.Get<string>(""test-key"");
if (testValue != ""test-value"") throw new Exception(""Test value was not found in the scenarioContext""); 
}
}", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 327
 testRunner.And("a scenario \'Simple Scenario\' as", "Given I put something into the context         \nThen something should be found in" +
                    " the context", ((TechTalk.SpecFlow.Table)(null)));
#line 332
 testRunner.When("I execute the tests");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Succeeded"});
            table8.AddRow(new string[] {
                        "1"});
#line 333
 testRunner.Then("the execution summary should contain", ((string)(null)), table8);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Different scenarios should have their own ScenarioContext injected")]
        public virtual void DifferentScenariosShouldHaveTheirOwnScenarioContextInjected()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Different scenarios should have their own ScenarioContext injected", ((string[])(null)));
#line 337
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 338
 testRunner.Given("the following binding class", @"[Binding]
public class StepsWithScenarioContext
{
private readonly ScenarioContext scenarioContext;

public StepsWithScenarioContext(ScenarioContext scenarioContext)
{
if (scenarioContext == null) throw new ArgumentNullException(""scenarioContext"");
this.scenarioContext = scenarioContext;
}

[When(@""I do something"")]
public void WhenIDoSomething()
{
string testValue = null;
if (scenarioContext.TryGetValue(""test-key"", out testValue)) throw new Exception(""Test value was found in the scenarioContext""); 
scenarioContext.Set(""test-value"", ""test-key"");
}
}", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 360
 testRunner.And("a scenario \'Simple Scenario\' as", "When I do something         ", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 364
 testRunner.And("a scenario \'Another Simple Scenario\' as", "When I do something         ", ((TechTalk.SpecFlow.Table)(null)));
#line 368
 testRunner.When("I execute the tests");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Succeeded"});
            table9.AddRow(new string[] {
                        "2"});
#line 369
 testRunner.Then("the execution summary should contain", ((string)(null)), table9);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should be able to inject FeatureContext")]
        public virtual void ShouldBeAbleToInjectFeatureContext()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should be able to inject FeatureContext", ((string[])(null)));
#line 373
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 374
 testRunner.Given("the following binding class", @"[Binding]
public class StepsWithScenarioContext
{
public StepsWithScenarioContext(FeatureContext featureContext)
{
if (featureContext == null) throw new ArgumentNullException(""featureContext"");
}

[When(@""I do something"")]
public void WhenIDoSomething()
{
}
}", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 390
 testRunner.And("a scenario \'Simple Scenario\' as", "When I do something         ", ((TechTalk.SpecFlow.Table)(null)));
#line 394
 testRunner.When("I execute the tests");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Succeeded"});
            table10.AddRow(new string[] {
                        "1"});
#line 395
 testRunner.Then("the execution summary should contain", ((string)(null)), table10);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The same FeatureContext should be inject in the scenarios of the same feature")]
        public virtual void TheSameFeatureContextShouldBeInjectInTheScenariosOfTheSameFeature()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The same FeatureContext should be inject in the scenarios of the same feature", ((string[])(null)));
#line 399
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 400
 testRunner.Given("the following binding class", @"[Binding]
public class StepsWithFeatureContext
{
private readonly FeatureContext featureContext;

public StepsWithFeatureContext(FeatureContext featureContext)
{
if (featureContext == null) throw new ArgumentNullException(""featureContext"");
this.featureContext = featureContext;
}

[Given(@""I put something into the context"")]
public void GivenIPutSomethingIntoTheContext()
{
featureContext.Set(""test-value"", ""test-key"");
}
}", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 420
 testRunner.Given("the following binding class", @"[Binding]
public class AnotherStepsWithFeatureContext
{
private readonly FeatureContext featureContext;

public AnotherStepsWithFeatureContext(FeatureContext featureContext)
{
if (featureContext == null) throw new ArgumentNullException(""featureContext"");
this.featureContext = featureContext;
}

[Then(@""something should be found in the context"")]
public void ThenSomethingShouldBeFoundInTheContext()
{
var testValue = featureContext.Get<string>(""test-key"");
if (testValue != ""test-value"") throw new Exception(""Test value was not found in the scenarioContext""); 
}
}", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 441
 testRunner.And("there is a feature file in the project as", "Feature: Feature1\n\nScenario: Scenario1\nGiven I put something into the context  \n\n" +
                    "Scenario: Scenario2\nThen something should be found in the context", ((TechTalk.SpecFlow.Table)(null)));
#line 451
 testRunner.When("I execute the tests");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Succeeded"});
            table11.AddRow(new string[] {
                        "2"});
#line 452
 testRunner.Then("the execution summary should contain", ((string)(null)), table11);
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#endregion
