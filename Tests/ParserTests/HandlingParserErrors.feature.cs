// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.7.0.0
//      SpecFlow Generator Version:1.7.0.0
//      Runtime Version:4.0.30319.235
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace ParserTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("In order to find out easily what is wrong with a Gherkin file\nAs a SpecFlow user\n" +
        "I want to get error messages for all possible errors")]
    public partial class HandlingErrorsOfGherkinFilesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "HandlingParserErrors.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Handling errors of Gherkin files", "In order to find out easily what is wrong with a Gherkin file\nAs a SpecFlow user\n" +
                    "I want to get error messages for all possible errors", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Capturing syntax error")]
        public virtual void CapturingSyntaxError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Capturing syntax error", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 7
 testRunner.Given("there is a Gherkin file as", "\tFeature: Syntax error\n\n\tScenario: misspelled step keyword\n\t\tGiven something\n\t\tWh" +
                    "enX something is misspelled", ((TechTalk.SpecFlow.Table)(null)));
#line 15
 testRunner.When("I parse the file");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "line",
                        "error"});
            table1.AddRow(new string[] {
                        "5",
                        "Parsing error near \'WhenX"});
#line 16
 testRunner.Then("the the following errors are provided", ((string)(null)), table1);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Capturing semantic error")]
        public virtual void CapturingSemanticError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Capturing semantic error", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 21
 testRunner.Given("there is a Gherkin file as", "\tFeature: Semantic error\n\n\tScenario: Table cell count mismatch\n\t\tGiven a table\n\t\t" +
                    "\t| h1 | h2 |\n\t\t\t| c1 | c2 | c3 |", ((TechTalk.SpecFlow.Table)(null)));
#line 30
 testRunner.When("I parse the file");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "line",
                        "error"});
            table2.AddRow(new string[] {
                        "6",
                        "Number of cells in the row does not match the number of cells in the header"});
#line 31
 testRunner.Then("the the following errors are provided", ((string)(null)), table2);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Capturing delayed semantic error")]
        public virtual void CapturingDelayedSemanticError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Capturing delayed semantic error", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 36
 testRunner.Given("there is a Gherkin file as", "\tFeature: Delayed semantic error\n\n\tScenario Outline: Scenario outline without exa" +
                    "mples\n\t\tGiven something\n\n\tScenario: proper scenario\n\t\tGiven something", ((TechTalk.SpecFlow.Table)(null)));
#line 46
 testRunner.When("I parse the file");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "line",
                        "error"});
            table3.AddRow(new string[] {
                        "3",
                        "There are no examples defined for the scenario outline"});
#line 47
 testRunner.Then("the the following errors are provided", ((string)(null)), table3);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Restart parsing after a syntax error")]
        public virtual void RestartParsingAfterASyntaxError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Restart parsing after a syntax error", ((string[])(null)));
#line 52
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 53
 testRunner.Given("there is a Gherkin file as", "\tFeature: misspelled step keyword\n\n\tScenario: misspelled step keyword 1\n\t\tGiven s" +
                    "omething\n\t\tWhenX something is misspelled\n\t\tThenX something is also misspelled", ((TechTalk.SpecFlow.Table)(null)));
#line 62
 testRunner.When("I parse the file");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "line",
                        "error"});
            table4.AddRow(new string[] {
                        "5",
                        "Parsing error near \'WhenX"});
            table4.AddRow(new string[] {
                        "6",
                        "Parsing error near \'ThenX"});
#line 63
 testRunner.Then("the the following errors are provided", ((string)(null)), table4);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Restart parsing after a semantic error")]
        public virtual void RestartParsingAfterASemanticError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Restart parsing after a semantic error", ((string[])(null)));
#line 68
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 69
 testRunner.Given("there is a Gherkin file as", "\tFeature: Table cell count mismatch\n\n\tScenario: Table cell count mismatch\n\t\tGiven" +
                    " a table\n\t\t\t| h1 | h2 |\n\t\t\t| c1 | c2 | c3 |\n\t\tWhenX something is misspelled", ((TechTalk.SpecFlow.Table)(null)));
#line 79
 testRunner.When("I parse the file");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "line",
                        "error"});
            table5.AddRow(new string[] {
                        "6",
                        "Number of cells in the row does not match the number of cells in the header"});
            table5.AddRow(new string[] {
                        "7",
                        "Parsing error near \'WhenX"});
#line 80
 testRunner.Then("the the following errors are provided", ((string)(null)), table5);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Do not restart parsing after a delayed semantic error")]
        public virtual void DoNotRestartParsingAfterADelayedSemanticError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Do not restart parsing after a delayed semantic error", ((string[])(null)));
#line 85
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 86
 testRunner.Given("there is a Gherkin file as", "\tFeature: Table cell count mismatch\n\n\tScenario Outline: Scenario outline without " +
                    "examples\n\t\tGiven something\n\n\tScenario Outline: Other scenario outline without ex" +
                    "amples\n\t\tGiven something\n\n\tScenario: proper scenario\n\t\tGiven something", ((TechTalk.SpecFlow.Table)(null)));
#line 99
 testRunner.When("I parse the file");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "line",
                        "error"});
            table6.AddRow(new string[] {
                        "3",
                        "There are no examples defined for the scenario outline"});
#line 100
 testRunner.Then("the the following errors are provided", ((string)(null)), table6);
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#endregion
