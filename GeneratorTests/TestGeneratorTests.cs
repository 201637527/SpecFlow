using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using NUnit.Framework;
using TechTalk.SpecFlow.Generator;
using TechTalk.SpecFlow.Generator.Configuration;
using Should;

namespace GeneratorTests
{
    [TestFixture]
    public class TestGeneratorTests
    {
        private GenerationSettings net35CSSettings;
        private GenerationSettings net35VBSettings;

        [SetUp]
        public void Setup()
        {
            net35CSSettings = new GenerationSettings(
                GenerationTargetLanguage.CSharp, "3.0",
                GenerationTargetPlatform.MsNet, "3.5",
                "DefaultNamespace");
            net35VBSettings = new GenerationSettings(
                GenerationTargetLanguage.VB, "8.0",
                GenerationTargetPlatform.MsNet, "3.5",
                "DefaultNamespace");
        }

        private FeatureFileInput CreateSimpleFeatureFileInput()
        {
            return new FeatureFileInput(
                @"C:\Temp\Dummy.feature",
                @"Dummy.feature",
                null,
                new StringReader(@"
Feature: Addition

@mytag
Scenario: Add two numbers
	Given I have entered 50 into the calculator
	And I have entered 70 into the calculator
	When I press add
	Then the result should be 120 on the screen
")
                );
        }

        private string GenerateTestFromSimpleFeature(GenerationSettings settings)
        {
            TestGenerator testGenerator = new TestGenerator(new GeneratorConfiguration());

            StringWriter outputWriter = new StringWriter();
            testGenerator.GenerateTestFile(CreateSimpleFeatureFileInput(), outputWriter, settings);

            return outputWriter.ToString();
        }

        [Test]
        public void Should_generate_a_net35_csharp_test_from_simple_feature()
        {
            string outputFile = GenerateTestFromSimpleFeature(net35CSSettings);
            outputFile.ShouldNotBeEmpty();
        }

        [Test]
        public void Should_generate_a_net35_vb_test_from_simple_feature()
        {
            string outputFile = GenerateTestFromSimpleFeature(net35VBSettings);
            outputFile.ShouldNotBeEmpty();
        }

        [Test]
        public void Should_include_header_in_generated_file()
        {
            string outputFile = GenerateTestFromSimpleFeature(net35CSSettings);
            outputFile.ShouldContain("This code was generated by SpecFlow");
        }

        [Test]
        public void Should_wrap_generated_test_with_designer_region()
        {
            string outputFile = GenerateTestFromSimpleFeature(net35CSSettings);
            outputFile.ShouldContain("#region Designer generated code");
            outputFile.ShouldContain("#endregion");
        }

        [Test]
        public void Should_include_generator_version_in_the_header()
        {
            string outputFile = GenerateTestFromSimpleFeature(net35CSSettings);
            outputFile.ShouldContain(string.Format("SpecFlow Generator Version:{0}", TestGeneratorFactory.GeneratorVersion));
        }
    }
}
