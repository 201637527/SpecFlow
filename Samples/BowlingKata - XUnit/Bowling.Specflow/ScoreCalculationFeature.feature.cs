// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.2.0.0
//      Runtime Version:2.0.50727.4927
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace Bowling.Specflow
{
    using System;
    using System.Globalization;
    using Xunit;
    using TechTalk.SpecFlow;
    
    
    public partial class ScoreCalculationFeature : IUseFixture<ScoreCalculationFixture>, IDisposable
    {
        
        private ScoreCalculationFixture _fixture;
        
        private bool _isDisposed = false;
        
#line 1 "ScoreCalculationFeature.feature"
#line hidden
		~ScoreCalculationFeature()
		{
			Dispose(false);
		}
		partial void OnDisposeManagedResources();
		partial void OnDisposeUnmanagedResources();
		partial void OnInitialize();
        
        public ScoreCalculationFeature()
        {
            this.OnInitialize();
        }
        
        public void SetFixture(ScoreCalculationFixture fixture)
        {
            _fixture = fixture;
        }
        
        public void Dispose()
        {
            this.Dispose(true);
            GC.SuppressFinalize(this);
        }
        
        private void Dispose(bool isDisposing)
        {
            if ((this._isDisposed == false))
            {
                if ((isDisposing == true))
                {
                    this.OnDisposeManagedResources();
                }
                this.OnDisposeUnmanagedResources();
                this._isDisposed = true;
            }
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Score Calculation")]
        [Xunit.TraitAttribute("Description", "Gutter game")]
        public void GutterGame()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Gutter game", ((string[])(null)));
#line 6
this._fixture.TestRunner.OnScenarioStart(scenarioInfo);
#line 7
  this._fixture.TestRunner.Given("a new bowling game");
#line 8
  this._fixture.TestRunner.When("all of my balls are landing in the gutter");
#line 9
  this._fixture.TestRunner.Then("my total score should be 0");
#line hidden
            this._fixture.TestRunner.CollectScenarioErrors();
            this._fixture.TestRunner.OnScenarioEnd();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Score Calculation")]
        [Xunit.TraitAttribute("Description", "Beginners game")]
        public void BeginnersGame()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Beginners game", ((string[])(null)));
#line 11
this._fixture.TestRunner.OnScenarioStart(scenarioInfo);
#line 12
  this._fixture.TestRunner.Given("a new bowling game");
#line 13
  this._fixture.TestRunner.When("I roll 2 and 7");
#line 14
  this._fixture.TestRunner.And("I roll 3 and 4");
#line 15
  this._fixture.TestRunner.And("I roll 8 times 1 and 1");
#line 16
  this._fixture.TestRunner.Then("my total score should be 32");
#line hidden
            this._fixture.TestRunner.CollectScenarioErrors();
            this._fixture.TestRunner.OnScenarioEnd();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Score Calculation")]
        [Xunit.TraitAttribute("Description", "Another beginners game")]
        public void AnotherBeginnersGame()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Another beginners game", ((string[])(null)));
#line 18
this._fixture.TestRunner.OnScenarioStart(scenarioInfo);
#line 19
  this._fixture.TestRunner.Given("a new bowling game");
#line 20
  this._fixture.TestRunner.When("I roll the following series:\t2,7,3,4,1,1,5,1,1,1,1,1,1,1,1,1,1,1,5,1");
#line 21
  this._fixture.TestRunner.Then("my total score should be 40");
#line hidden
            this._fixture.TestRunner.CollectScenarioErrors();
            this._fixture.TestRunner.OnScenarioEnd();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Score Calculation")]
        [Xunit.TraitAttribute("Description", "All Strikes")]
        public void AllStrikes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All Strikes", ((string[])(null)));
#line 23
this._fixture.TestRunner.OnScenarioStart(scenarioInfo);
#line 24
  this._fixture.TestRunner.Given("a new bowling game");
#line 25
  this._fixture.TestRunner.When("all of my rolls are strikes");
#line 26
  this._fixture.TestRunner.Then("my total score should be 300");
#line hidden
            this._fixture.TestRunner.CollectScenarioErrors();
            this._fixture.TestRunner.OnScenarioEnd();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Score Calculation")]
        [Xunit.TraitAttribute("Description", "One single spare")]
        public void OneSingleSpare()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One single spare", ((string[])(null)));
#line 28
this._fixture.TestRunner.OnScenarioStart(scenarioInfo);
#line 29
   this._fixture.TestRunner.Given("a new bowling game");
#line 30
   this._fixture.TestRunner.When("I roll the following series: 2,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1");
#line 31
   this._fixture.TestRunner.Then("my total score should be 29");
#line hidden
            this._fixture.TestRunner.CollectScenarioErrors();
            this._fixture.TestRunner.OnScenarioEnd();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Score Calculation")]
        [Xunit.TraitAttribute("Description", "All spares")]
        public void AllSpares()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All spares", ((string[])(null)));
#line 33
this._fixture.TestRunner.OnScenarioStart(scenarioInfo);
#line 34
  this._fixture.TestRunner.Given("a new bowling game");
#line 35
  this._fixture.TestRunner.When("I roll 10 times 1 and 9");
#line 36
  this._fixture.TestRunner.And("I roll 1");
#line 37
  this._fixture.TestRunner.Then("my total score should be 110");
#line hidden
            this._fixture.TestRunner.CollectScenarioErrors();
            this._fixture.TestRunner.OnScenarioEnd();
        }
    }
    
    public partial class ScoreCalculationFixture : IDisposable
    {
        
        private bool _isDisposed = false;
        
        private ITestRunner _testRunner;
        
		~ScoreCalculationFixture()
		{
			Dispose(false);
		}
		partial void OnDisposeManagedResources();
		partial void OnDisposeUnmanagedResources();
        
        public ScoreCalculationFixture()
        {
            FeatureInfo featureInfo = new FeatureInfo(new System.Globalization.CultureInfo("en"), "Score Calculation", "In order to know my performance\r\nAs a player\r\nI want the system to calculate my t" +
                    "otal score", ((string[])(null)));
            this._testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            this._testRunner.OnFeatureStart(featureInfo);
        }
        
        public ITestRunner TestRunner
        {
            get
            {
                return this._testRunner;
            }
        }
        
        public void Dispose()
        {
            this.Dispose(true);
            GC.SuppressFinalize(this);
        }
        
        private void Dispose(bool isDisposing)
        {
            if ((this._isDisposed == false))
            {
                if (((this._testRunner == null) 
                            == false))
                {
                    this._testRunner.OnFeatureEnd();
                    this._testRunner = null;
                }
                if ((isDisposing == true))
                {
                    this.OnDisposeManagedResources();
                }
                this.OnDisposeUnmanagedResources();
                this._isDisposed = true;
            }
        }
    }
}
