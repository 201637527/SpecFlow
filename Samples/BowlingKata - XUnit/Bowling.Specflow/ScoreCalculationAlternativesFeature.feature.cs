// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.2.0.0
//      Runtime Version:2.0.50727.4927
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace Bowling.Specflow
{
    using System;
    using System.Globalization;
    using Xunit;
    using TechTalk.SpecFlow;
    
    
    public partial class ScoreCalculationAlternativeFormsFeature : IUseFixture<ScoreCalculationAlternativeFormsFixture>, IDisposable
    {
        
        private ScoreCalculationAlternativeFormsFixture _fixture;
        
        private bool _isDisposed = false;
        
#line 1 "ScoreCalculationAlternativesFeature.feature"
#line hidden
		~ScoreCalculationAlternativeFormsFeature()
		{
			Dispose(false);
		}
		partial void OnDisposeManagedResources();
		partial void OnDisposeUnmanagedResources();
		partial void OnInitialize();
        
        public ScoreCalculationAlternativeFormsFeature()
        {
            this.OnInitialize();
        }
        
        public void SetFixture(ScoreCalculationAlternativeFormsFixture fixture)
        {
            _fixture = fixture;
        }
        
        public void Dispose()
        {
            this.Dispose(true);
            GC.SuppressFinalize(this);
        }
        
        private void Dispose(bool isDisposing)
        {
            if ((this._isDisposed == false))
            {
                if ((isDisposing == true))
                {
                    this.OnDisposeManagedResources();
                }
                this.OnDisposeUnmanagedResources();
                this._isDisposed = true;
            }
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Score Calculation (alternative forms)")]
        [Xunit.TraitAttribute("Description", "One single spare")]
        public void OneSingleSpare()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One single spare", ((string[])(null)));
#line 7
this._fixture.TestRunner.OnScenarioStart(scenarioInfo);
#line 8
  this._fixture.TestRunner.Given("a new bowling game");
#line 9
  this._fixture.TestRunner.When("I roll the following series:\t3,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1");
#line 10
  this._fixture.TestRunner.Then("my total score should be 29");
#line hidden
            this._fixture.TestRunner.CollectScenarioErrors();
            this._fixture.TestRunner.OnScenarioEnd();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Score Calculation (alternative forms)")]
        [Xunit.TraitAttribute("Description", "All spares")]
        public void AllSpares()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All spares", ((string[])(null)));
#line 12
this._fixture.TestRunner.OnScenarioStart(scenarioInfo);
#line 13
  this._fixture.TestRunner.Given("a new bowling game");
#line 14
  this._fixture.TestRunner.When("I roll 10 times 1 and 9");
#line 15
  this._fixture.TestRunner.And("I roll 1");
#line 16
  this._fixture.TestRunner.Then("my total score should be 110");
#line hidden
            this._fixture.TestRunner.CollectScenarioErrors();
            this._fixture.TestRunner.OnScenarioEnd();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Score Calculation (alternative forms)")]
        [Xunit.TraitAttribute("Description", "Yet another beginners game")]
        public void YetAnotherBeginnersGame()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Yet another beginners game", ((string[])(null)));
#line 18
this._fixture.TestRunner.OnScenarioStart(scenarioInfo);
#line 19
  this._fixture.TestRunner.Given("a new bowling game");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Pins"});
            table1.AddRow(new string[] {
                        "2"});
            table1.AddRow(new string[] {
                        "7"});
            table1.AddRow(new string[] {
                        "1"});
            table1.AddRow(new string[] {
                        "5"});
            table1.AddRow(new string[] {
                        "1"});
            table1.AddRow(new string[] {
                        "1"});
            table1.AddRow(new string[] {
                        "1"});
            table1.AddRow(new string[] {
                        "3"});
            table1.AddRow(new string[] {
                        "1"});
            table1.AddRow(new string[] {
                        "1"});
            table1.AddRow(new string[] {
                        "1"});
            table1.AddRow(new string[] {
                        "4"});
            table1.AddRow(new string[] {
                        "1"});
            table1.AddRow(new string[] {
                        "1"});
            table1.AddRow(new string[] {
                        "1"});
            table1.AddRow(new string[] {
                        "1"});
            table1.AddRow(new string[] {
                        "8"});
            table1.AddRow(new string[] {
                        "1"});
            table1.AddRow(new string[] {
                        "1"});
            table1.AddRow(new string[] {
                        "1"});
#line 20
  this._fixture.TestRunner.When("I roll", ((string)(null)), table1);
#line 42
  this._fixture.TestRunner.Then("my total score should be 43");
#line hidden
            this._fixture.TestRunner.CollectScenarioErrors();
            this._fixture.TestRunner.OnScenarioEnd();
        }
    }
    
    public partial class ScoreCalculationAlternativeFormsFixture : IDisposable
    {
        
        private bool _isDisposed = false;
        
        private ITestRunner _testRunner;
        
		~ScoreCalculationAlternativeFormsFixture()
		{
			Dispose(false);
		}
		partial void OnDisposeManagedResources();
		partial void OnDisposeUnmanagedResources();
        
        public ScoreCalculationAlternativeFormsFixture()
        {
            FeatureInfo featureInfo = new FeatureInfo(new System.Globalization.CultureInfo("en"), "Score Calculation (alternative forms)", "In order to know my performance\r\nAs a player\r\nI want the system to calculate my t" +
                    "otal score", ((string[])(null)));
            this._testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            this._testRunner.OnFeatureStart(featureInfo);
        }
        
        public ITestRunner TestRunner
        {
            get
            {
                return this._testRunner;
            }
        }
        
        public void Dispose()
        {
            this.Dispose(true);
            GC.SuppressFinalize(this);
        }
        
        private void Dispose(bool isDisposing)
        {
            if ((this._isDisposed == false))
            {
                if (((this._testRunner == null) 
                            == false))
                {
                    this._testRunner.OnFeatureEnd();
                    this._testRunner = null;
                }
                if ((isDisposing == true))
                {
                    this.OnDisposeManagedResources();
                }
                this.OnDisposeUnmanagedResources();
                this._isDisposed = true;
            }
        }
    }
}
