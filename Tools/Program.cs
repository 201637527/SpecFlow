using System;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Xsl;
using NConsoler;
using TechTalk.SpecFlow.Generator;
using TechTalk.SpecFlow.Generator.Configuration;
using TechTalk.SpecFlow.Reporting.NUnitExecutionReport;
using TechTalk.SpecFlow.Reporting.StepDefinitionReport;

namespace TechTalk.SpecFlow.Tools
{
    internal class Program
    {
        private static void Main(string[] args)
        {
            Consolery.Run(typeof(Program), args);
            return;
        }

        [Action("Generate tests from all feature files in a project")]
        public static void GenerateAll(
            [Required(Description = "Visual Studio Project File containing features")] string projectFile,
            [Optional(false, "force", "f")] bool forceGeneration,
            [Optional(false, "verbose", "v")] bool verboseOutput)
        {
            SpecFlowProject specFlowProject = MsBuildProjectReader.LoadSpecFlowProjectFromMsBuild(projectFile);
            var batchGenerator = new BatchGenerator(Console.Out, verboseOutput);
            batchGenerator.ProcessProject(specFlowProject, forceGeneration);
        }

        #region Reports

        [Action("Generates a report about usage and binding of steps")]
        public static void StepDefinitionReport(
            [Required(Description = "Visual Studio Project File containing specs")] string projectFile,
            [Optional("bin\\Debug", Description = @"Path for Spec dll e.g. Company.Specs.dll. Defaults to bin\Debug ")] string binFolder,
            [Optional("StepDefinitionReport.html", "out", Description = "Generated Output File. Defaults to StepDefinitionReport.html")] string outputFile)
        {
            var generator = new StepDefinitionReportGenerator(projectFile, binFolder, true);
            generator.GenerateReport();
            generator.TransformReport(Path.GetFullPath(outputFile));
        }

        [Action("Formats an NUnit execution report to SpecFlow style")]
        public static void NUnitExecutionReport([Required(Description = "Visual Studio Project File containing specs")] string projectFile,
            [Optional("TestResult.xml", Description = "Xml Test Result file generated by NUnit. Defaults to TestResult.xml")] string xmlTestResult,
            [Optional("TestResult.txt", "testOutput")] string labeledTestOutput,
            [Optional("TestResult.html", "out", Description = "Generated Output File. Defaults to TestResult.html")] string outputFile)
        {
            var generator = new NUnitExecutionReportGenerator(projectFile, Path.GetFullPath(xmlTestResult),
                Path.GetFullPath(labeledTestOutput));

            generator.GenerateReport();
            generator.TransformReport(Path.GetFullPath(outputFile));
        }

        [Action("Formats an Test Execution report to SpecFlow style")]
        public static void TestExecutionReport([Required(Description = "Visual Studio Project File containing specs")] string projectFile,
            [Optional("TestResult.xml", Description = "Xml Test Result file generated by Gallio. Defaults to TestResult.xml")] string xmlTestResult,
            [Optional("TestResult.txt", "testOutput")] string labeledTestOutput,
            [Optional("TestResult.html", "out", Description = "Generated Output File. Defaults to TestResult.html")] string outputFile)
        {
            XDocument doc = XDocument.Load(xmlTestResult);
            var tranny = new XslCompiledTransform();
            tranny.Load("Gallio2NUnit.xslt");
            XmlReader reader = doc.CreateReader();
            const string outputFileName = "TestResult.xml";
            XmlWriter writer = XmlWriter.Create(outputFileName);
            tranny.Transform(reader, writer);
            writer.Close();

            var generator = new NUnitExecutionReportGenerator(projectFile, Path.GetFullPath(outputFileName),
                Path.GetFullPath(labeledTestOutput));

            generator.GenerateReport();
            generator.TransformReport(Path.GetFullPath(outputFile));
        }

        #endregion
    }
}